openapi: 3.0.0
info:
  title: Accounts Service
  version: 1.0.0
  description: The Accounts Service is responsible for managing user-related operations and system configurations.
    User Management - Create, retrieve, update and delete user accounts.
    Authentication & Authorization - Handle user authentication, session management, and access control.
    System Configurations - Manage system-specific setting such as API configurations, user scopes and groups.

servers:
  - url: /accounts-svc/api/v1.0
    description: Local development server

components:
  parameters:
    UserIdParam:
      name: userId
      description: The ID of user to verify
      in: path
      required: true
      schema:
        type: string
        pattern: '^[A-F0-9]{8}:[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{11}'

    TokenParam:
      name: token
      description: The verification token sent to the user's email
      in: path
      required: true
      schema:
        type: string

    RoleIdParam:
      name: roleId
      description: The ID of role to verify
      in: path
      required: true
      schema:
        type: string
        pattern: '^[A-F0-9]{8}:[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{11}'

    ScopeIdParam:
      name: scopeId
      description: The ID of scope to verify
      in: path
      required: true
      schema:
        type: string
        pattern: '^[A-F0-9]{8}:[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{11}'

  schemas:
    Username:
      type: string
      description: Username for the account
      pattern: '^[a-zA-Z0-9]{4,24}$'

    EmailId:
      type: string
      description: The email id of user
      pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$'

    Password:
      type: string
      description: user account password
      pattern: '^[a-zA-Z0-9@_.&*#$]{8,32}$'
  
    registerUserPayload:
      type: object
      properties:
        firstName:
          type: string
          description: First Name
          minLength: 1
        lastName:
          type: string
          description: Last Name
        username:
          type: string
          description: Username
          $ref: '#/components/schemas/Username'
        emailId:
          type: string
          description: Email Id
          $ref: '#/components/schemas/EmailId'
        password:
          type: string
          description: Password
          $ref: '#/components/schemas/Password'
      required:
        - firstName
        - username
        - emailId
        - password

    loginUserPayload:
      type: object
      properties:
        usernameEmail:
          type: string
          description: Username or Email Id
          minLength: 1
        password:
          type: string
          description: Password
          $ref: '#/components/schemas/Password'
      required:
        - usernameEmail
        - password

    registerUserRolePayload:
      type: object
      properties:
        roleCode:
          type: string
          description: Role Code
          minLength: 1
        roleDesc:
          type: string
          description: Role Description
          minLength: 1
        default:
          type: boolean
          description: Is default user role
      required:
        - roleCode
        - roleDesc

    updateUserRolePayload:
      type: object
      properties:
        roleDesc:
          type: string
          description: Role Description
          minLength: 1
        default:
          type: boolean
          description: Is default user role
        active:
          type: boolean
          description: Is active user role
      required:
        - roleDesc

    registerUserScopePayload:
      type: object
      properties:
        scopeCode:
          type: string
          description: Scope Code
          minLength: 2
        scopeDesc:
          type: string
          description: Scope Description
          minLength: 1
      required:
        - scopeCode
        - scopeDesc

    updateUserScopePayload:
      type: object
      properties:
        scopeDesc:
          type: string
          description: Scope Description
          minLength: 1
      required:
        - scopeDesc

    updateScopeAssignmentPayload:
      type: object
      properties:
        scopes:
          type: array
          description: Scope ID
      required:
        - scopes

    registerAppServicePayload:
      type: object
      properties:
        microservice:
          type: string
          description: Micro-service
          minLength: 5
        environment:
          type: string
          description: Environment
          minLength: 2
        protocol:
          type: string
          description: Protocol
          minLength: 4
          enum:
            - HTTP
            - HTTPS
        port:
          type: string
          description: Port
          minLength: 3
      required:
        - microservice
        - environment
        - protocol
        - port

    healthCheckData:
      title: Schema for Health Check Data
      type: object
      properties:
        uptime:
          type: string
        timestamp:
          type: string
        hostname:
          type: string

    verificationData:
      title: Schema for User Verification Data
      type: object
      properties:
        verificationToken:
          type: string
        verificationTokenExp:
          type: string

    loginUserData:
      title: Schema for Login User Data
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
          example: First Name
        lastName:
          type: string
          example: Last Name
        email:
          type: string
          example: email@exmp.xyz
        username:
          type: string
          example: username
        loginType:
          type: string
          example: EMAIL_PASSWORD
        isEmailVerified:
          type: boolean
          example: true
        role:
          type: string
          example: USER
        createdDate:
          type: string
        modifiedDate:
          type: string
      required:
        - id
        - firstName
        - email
        - username
        - loginType
        - isEmailVerified
        - role
        - createdDate
        - modifiedDate

    registerUserResponseData:
      title: Schema for Register User Response Data
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
          example: First Name
        email:
          type: string
          example: email@exmp.xyz
        username:
          type: string
          example: username
        loginType:
          type: string
          example: EMAIL_PASSWORD
        isEmailVerified:
          type: boolean
          example: true
        role:
          type: string
          example: USER
        lastLogin:
          type: string
        loginCount:
          type: integer
          example: 0
        createdDate:
          type: string
        modifiedDate:
          type: string
        verification:
          type: object
          $ref: '#/components/schemas/verificationData'
      required:
        - id
        - firstName
        - email
        - username
        - loginType
        - isEmailVerified
        - role
        - createdDate
        - modifiedDate
        - verification

    loginUserResponseData:
      title: Schema for Login User Response Data
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          type: object
          $ref: '#/components/schemas/loginUserData'
      required:
        - accessToken
        - refreshToken
        - user

    getUserInfoResponseData:
      title: Schema for Get User Info Response Data
      type: object
      properties:
        id:
          type: string
        role:
          type: string
        firstName:
          type: string
        lastName:
          type: string
          nullable: true
        username:
          type: string
        email:
          type: string
        gender:
          type: string
          nullable: true
        dob:
          type: string
          nullable: true
        contactNumber:
          type: string
          nullable: true
        profileImgURI:
          type: string
          nullable: true
        isVerified:
          type: boolean
        lastLogin:
          type: string
        createdDate:
          type: string
        modifiedDate:
          type: string
      required:
        - id
        - role
        - firstName
        - username
        - email
        - isVerified
        - lastLogin
        - createdDate
        - modifiedDate

    registerUserRoleResponseData:
      title: Schema for User Role Detail Response Data
      type: object
      properties:
        id:
          type: string
        roleCode:
          type: string
        roleDesc:
          type: string
        active:
          type: boolean
        default:
          type: boolean
        createdDate:
          type: string
        modifiedDate:
          type: string
      required:
        - id
        - roleCode
        - roleDesc
        - active
        - default

    getUserRoleResponseData:
      title: Schema for Fetching User Role Response Data
      type: object
      properties:
        id:
          type: string
        roleCode:
          type: string
        roleDesc:
          type: string
        active:
          type: boolean
        default:
          type: boolean
      required:
        - id
        - roleCode
        - roleDesc
        - active
        - default

    registerUserScopeResponseData:
      title: Schema for User Scope Detail Response Data
      type: object
      properties:
        id:
          type: string
        scopeCode:
          type: string
        scopeDesc:
          type: string
        createdDate:
          type: string
        modifiedDate:
          type: string
      required:
        - id
        - scopeCode
        - scopeDesc

    getUserScopeResponseData:
      title: Schema for Fetching User Scope Response Data
      type: object
      properties:
        id:
          type: string
        scopeCode:
          type: string
        scopeDesc:
          type: string
      required:
        - scopeCode
        - scopeDesc

    updateScopeAssignmentResponseData:
      title: Schema for Fetching User Scopes for Requested Role Response Data
      type: object
      properties:
        id:
          type: string
        roleCode:
          type: string
        roleDesc:
          type: string
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/getUserScopeResponseData'

    registerAppServiceResponseData:
      title: Schema for Fetching Service Configuration for Requested Service Response Data
      type: object
      properties:
        id:
          type: string
        microservice:
          type: string
        environment:
          type: string
        protocol:
          type: string
        port:
          type: string
        createdDate:
          type: string
        modifiedDate:
          type: string
      required:
        - id
        - microservice
        - environment
        - protocol
        - port

    emptyResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object

    healthCheckSuccessResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/healthCheckData'

    registerUserResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        type:
          type: string
          example: 'REQUEST_COMPLETED'
        message:
          type: string
          example: 'Request Completed'
        devMessage:
          type: string
          example: 'Request Completed'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/registerUserResponseData'

    verifyUserResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object

    loginUserResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/loginUserResponseData'

    getUserInfoResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/getUserInfoResponseData'

    registerUserRoleResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/registerUserRoleResponseData'
    
    getUserRolesResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/getUserRoleResponseData'

    getUserRoleByIdResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200,
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/registerUserRoleResponseData'

    updateUserRoleResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/registerUserRoleResponseData'

    registerUserScopeResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        type:
          type: string
          example: 'REQUEST_COMPLETED'
        message:
          type: string
          example: 'Request Completed'
        devMessage:
          type: string
          example: 'Request Completed'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/registerUserScopeResponseData'

    getUserScopeResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/getUserScopeResponseData'

    getUserScopeByIdResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/registerUserScopeResponseData'

    updateUserScopeResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/registerUserScopeResponseData'

    updateScopeAssignmentResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/updateScopeAssignmentResponseData'

    registerAppServiceResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/registerAppServiceResponseData'

    noContentResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 204
        type:
          type: string
          example: 'CONTENT_NOT_AVAILABLE'
        message:
          type: string
          example: 'No content available'
        devMessage:
          type: string
          example: 'No content available'
        success:
          type: boolean
          example: true
        data:
          type: array

    badRequestResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        type:
          type: string
          example: 'BAD_REQUEST'
        message:
          type: string
          example: 'Bad Request'
        devMessage:
          type: string
          example: Bad Request. Required resource does not exist.
        error:
          type: array
        data:
          type: array

    unauthorizedResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 401
        type:
          type: string
          example: 'UNAUTHORIZED'
        message:
          type: string
          example: 'Unauthorized'
        devMessage:
          type: string
          example: Unauthorized access. Could not proceed with the request.
        error:
          type: array
        data:
          type: array
    
    notFound:
      type: object
      properties:
        statusCode:
          type: integer
          example: 404
        type:
          type: string
          example: 'NOT_FOUND'
        message:
          type: string
          example: 'Resource Not Found'
        devMessage:
          type: string
          example: Not Found. Requested resource does not exist.
        error:
          type: array
        data:
          type: array

    gone:
      type: object
      properties:
        statusCode:
          type: integer
          example: 410
        type:
          type: string
          example: 'GONE'
        message:
          type: string
          example: 'The requested content has been permanently deleted from server.'
        devMessage:
          type: string
          example: 'The requested content has been permanently deleted from server.'
        error:
          type: array
        data:
          type: array

    badEvent:
      type: object
      properties:
        statusCode:
          type: integer
          example: 489
        type:
          type: string
          example: 'BAD_EVENT'
        message:
          type: string
          example: 'The server did not understand an event package specified in an Event header field.'
        devMessage:
          type: string
          example: 'The server did not understand an event package specified in an Event header field.'
        error:
          type: array
        data:
          type: array

    userAlreadyExist:
      type: object
      properties:
        statusCode:
          type: integer
          example: 409
        type:
          type: string
          example: 'CONFLICT'
        message:
          type: string
          example: 'Resource already exist'
        devMessage:
          type: string
          example: 'Resource already exist'
        error:
          type: array
        data:
          type: array

    internalServerErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 500
        type:
          type: string
          example: 'Internal Server Error'
        message:
          type: string
          example: 'Internal Server Error'
        devMessage:
          type: string
          example: 'Internal Server Error'
        error:
          type: array
        data:
          type: array

paths:
  /health:
    get:
      operationId: healthCheck
      summary: Service Health Check
      description: An API to check the health status of the service.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthCheckSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /register-user:
    post:
      operationId: registerUser
      summary: Register New User
      description: An API to register a user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerUserPayload'
      responses:
        '201':
          description: REQUEST_COMPLETED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerUserResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAlreadyExist'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /verify-user/{userId}/{token}:
    put:
      operationId: verifyUser
      summary: Verify User Email ID
      description: An API to verify user email id in the system.
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
        - $ref: '#/components/parameters/TokenParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifyUserResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '410':
          description: GONE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gone'
        '489':
          description: BAD_EVENT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badEvent'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /login:
    post:
      operationId: loginUser
      summary: Login User
      description: An API to login a user which exist in system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUserPayload'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginUserResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '410':
          description: GONE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gone'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /user/{userId}:
    get:
      operationId: getUserInfo
      summary: Get User Info by ID
      description: An API to retrieve the info about currently loggedin user.
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserInfoResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /user/logout:
    post:
      operationId: userLogout
      summary: Logout User by Token
      description: An API to logout the currently loggedin user.
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /setup/user-role:
    post:
      operationId: RegisterUserRole
      summary: Register New User Role
      description: An API to register new user role in system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerUserRolePayload'
      responses:
        '201':
          description: REQUEST_COMPLETED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerUserRoleResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAlreadyExist'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'
    
    get:
      operationId: GetUserRoles
      summary: Get all User Roles
      description: An API to fetch all user roles exist in system.
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserRolesResponse'
        '204':
          description: CONTENT_NOT_AVAILABLE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noContentResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /setup/user-role/{roleId}:
    get:
      operationId: getUserRoleInfoById
      summary: Get User Role Info by ID
      description: An API to retrieve the user role info for requested ID.
      parameters:
        - $ref: '#/components/parameters/RoleIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserRoleByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    put:
      operationId: updateUserRoleInfoById
      summary: Update User Role Info by ID
      description: An API to update the user role info for requested ID.
      parameters:
        - $ref: '#/components/parameters/RoleIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserRolePayload'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUserRoleResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    delete:
      operationId: deleteUserRoleById
      summary: Delete User Role by ID
      description: An API to delete the user role for requested ID.
      parameters:
        - $ref: '#/components/parameters/RoleIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserRoleByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /setup/user-scope:
    post:
      operationId: RegisterUserScope
      summary: Register New User Scope
      description: An API to register new user scope in system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerUserScopePayload'
      responses:
        '201':
          description: REQUEST_COMPLETED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerUserScopeResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAlreadyExist'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    get:
      operationId: GetUserScopes
      summary: Get all User Scopes
      description: An API to fetch all user scopes exist in system.
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserScopeResponse'
        '204':
          description: CONTENT_NOT_AVAILABLE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noContentResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /setup/user-scope/{scopeId}:
    get:
      operationId: getUserScopeInfoById
      summary: Get User Socpe Info by ID
      description: An API to retrieve the user scope info for requested ID.
      parameters:
        - $ref: '#/components/parameters/ScopeIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserScopeByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    put:
      operationId: updateUserScopeInfoById
      summary: Update User Scope Info by ID
      description: An API to update the user scope info for requested ID.
      parameters:
        - $ref: '#/components/parameters/ScopeIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserScopePayload'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUserScopeResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    delete:
      operationId: deleteUserScopeById
      summary: Delete User Scope by ID
      description: An API to delete the user scope for requested ID.
      parameters:
        - $ref: '#/components/parameters/ScopeIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUserScopeResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /setup/unassigned-scope/{roleId}:
    get:
      operationId: getUnassignedUserScopeForRoleId
      summary: Get User Scope Info unassigned to Role ID
      description: An API to retrieve the user scope info unassigned for requested role ID.
      parameters:
        - $ref: '#/components/parameters/RoleIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserScopeResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /setup/assigned-scope/{roleId}:
    get:
      operationId: getAssignedUserScopeForRoleId
      summary: Get User Scope Info assigned to Role ID
      description: An API to retrieve the user scope info assigned for requested role ID.
      parameters:
        - $ref: '#/components/parameters/RoleIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserScopeResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    put:
      operationId: updateScopesAssignmentForRoleId
      summary: Update Scopes assignment for Role ID
      description: An API to update the user scopes assignment for requested role ID.
      parameters:
        - $ref: '#/components/parameters/RoleIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateScopeAssignmentPayload'
      responses:
        '201':
          description: REQUEST_COMPLETED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateScopeAssignmentResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /setup/app-service:
    post:
      operationId: RegisterServiceConfig
      summary: Register New Service Configuration
      description: An API to register new service configuration in system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerAppServicePayload'
      responses:
        '201':
          description: REQUEST_COMPLETED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerAppServiceResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAlreadyExist'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'