'use strict';

import {
  fetchDefaultUserRole,
  isUsernameEmailInUse,
  createNewUser,
  getUserInfo,
  registerEmailVerification,
  fetchUserMetaInfo,
  verifyUserEmail,
  getUserInfoByUsernameOrPassword,
  getUserPasskey,
  storeUserToken,
  getUserDtl,
  logoutUser,
  getUserScope,
} from './user.db.js';

import {
  isRoleAvailable,
  getDefaultRole,
  deactivateRole,
  registerNewRole,
  getUserRoleById,
  getUserRoles,
  updateUserRoleById,
  deleteUserRoleById,
  isScopeAvailable,
  registerNewScope,
  getUserScopeById,
  getUserScopes,
  updateUserScopeById,
  deleteUserScopeById,
  unassignedScopesByRoleId,
  assignedScopesByRoleId,
  getMultipleScopesByIds,
  assignScopesToRole,
  unassignScopesToRole,
  isServiceAvailable,
  registerNewService,
  getServiceById,
  getServiceConfig,
  isRouteAvailable,
  registerNewRoute,
  getRouteById,
  getRouteConfig,
  updateServiceInfoById,
  deleteServiceInfoById,
  deleteRouteInfoById,
  updateRouteInfoById,
} from './system.db.js';

import {
  isDashboardHeaderAvailable,
  registerNewHeader,
  getHeaderById,
  getAllHeaders,
  updateHeaderInfo,
  isDashboardCategoryAvailable,
  registerNewCategory,
  getCategoryById,
  getAllCategoryInfo,
  updateCategoryInfo,
  deleteCategoryById,
  setupByHeaderId,
  deleteHeaderById,
} from './dashboard.db.js';

export {
  fetchDefaultUserRole,
  isUsernameEmailInUse,
  createNewUser,
  getUserInfo,
  registerEmailVerification,
  fetchUserMetaInfo,
  verifyUserEmail,
  getUserInfoByUsernameOrPassword,
  getUserPasskey,
  storeUserToken,
  getUserDtl,
  logoutUser,
  isRoleAvailable,
  getDefaultRole,
  deactivateRole,
  registerNewRole,
  getUserRoleById,
  getUserRoles,
  updateUserRoleById,
  deleteUserRoleById,
  isScopeAvailable,
  registerNewScope,
  getUserScopeById,
  getUserScopes,
  updateUserScopeById,
  deleteUserScopeById,
  unassignedScopesByRoleId,
  assignedScopesByRoleId,
  getMultipleScopesByIds,
  assignScopesToRole,
  unassignScopesToRole,
  isServiceAvailable,
  registerNewService,
  getServiceById,
  getServiceConfig,
  isRouteAvailable,
  registerNewRoute,
  getRouteById,
  getRouteConfig,
  updateServiceInfoById,
  deleteServiceInfoById,
  deleteRouteInfoById,
  updateRouteInfoById,
  isDashboardHeaderAvailable,
  registerNewHeader,
  getHeaderById,
  getAllHeaders,
  updateHeaderInfo,
  isDashboardCategoryAvailable,
  getUserScope,
  registerNewCategory,
  getCategoryById,
  getAllCategoryInfo,
  updateCategoryInfo,
  deleteCategoryById,
  setupByHeaderId,
  deleteHeaderById,
};
